{"version":3,"sources":["components/styles/styles.js","components/Chart/index.jsx","App.js","serviceWorker.js","index.js"],"names":["makeStyles","button","backgroundColor","root","flexGrow","title","color","appbar","about","item","margin","LightweightChart","chart","createChart","this","props","containerId","width","height","addLineSeries","setData","time","value","addBarSeries","thinBars","open","high","low","close","remove","id","className","style","React","defaultProps","App","window","token","pnl","spot_balance","spot_total","grand_total","positions","futures_account","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAEyBA,YAAW,CAChCC,OAAQ,CACJC,gBAAiB,MACjB,UAAW,CACPA,gBAAiB,SAGzBC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHD,SAAU,EACVE,MAAO,WAEXC,OAAQ,CACJL,gBAAiB,WAErBM,MAAO,CACHF,MAAO,WAEXG,KAAM,CACFC,OAAQ,U,OCjBVC,E,4MAMFC,MAAQ,K,kEAIJ,IAAMA,EAAQC,YAAYC,KAAKC,MAAMC,YAAa,CAAEC,MAAO,IAAKC,OAAQ,MACxEJ,KAAKF,MAAQA,EAEMA,EAAMO,gBAEdC,QAAQ,CACf,CAAEC,KAAM,aAAcC,MAAO,OAC7B,CAAED,KAAM,aAAcC,MAAO,SAGfV,EAAMW,aAAa,CACjCC,UAAU,IAIJJ,QAAQ,CACd,CAAEC,KAAM,aAAcI,KAAM,OAAQC,KAAM,OAAQC,IAAK,OAAQC,MAAO,QACtE,CAAEP,KAAM,aAAcI,KAAM,OAAQC,KAAM,OAAQC,IAAK,OAAQC,MAAO,Y,6CAK7D,OAAfd,KAAKF,QACRE,KAAKF,MAAMiB,SACXf,KAAKF,MAAQ,Q,+BAKd,OACC,uBACCkB,GAAKhB,KAAKC,MAAMC,YACJe,UAAY,mBACZC,MAAO,CAAEtB,OAAQ,c,GA3CFuB,iBAAzBtB,EAEKuB,aAAe,CACxBlB,YAAa,+B,MAwDAL,ICLAwB,E,uKA5BP,OACI,yBAAKJ,UAAU,OACX,4BAAQA,UAAU,cACd,2BACKK,OAAOC,MACPD,OAAO/B,MACP+B,OAAOE,IACPF,OAAOG,aACPH,OAAOI,WACPJ,OAAOK,YACPL,OAAOM,UACPN,OAAOO,uB,GAbdC,aClBEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.f1279c0b.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    button: {\r\n        backgroundColor: \"red\",\r\n        '&:hover': {\r\n            backgroundColor: 'blue',\r\n        },\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        color: '#FBC624'\r\n    },\r\n    appbar: {\r\n        backgroundColor: \"#000000\"\r\n    },\r\n    about: {\r\n        color: \"#FBC624\"\r\n    },\r\n    item: {\r\n        margin: \"1rem\"\r\n    },\r\n});","import * as React from 'react';\r\nimport { createChart } from 'lightweight-charts';\r\nimport { Typography, Paper } from '@material-ui/core';\r\nimport { useStyles } from '../styles/styles';\r\n\r\n\r\nclass LightweightChart extends React.PureComponent {\r\n    \r\n    static defaultProps = {\r\n\t\tcontainerId: 'lightweight_chart_container',\r\n\t};\r\n\r\n    chart = null;\r\n\r\n    componentDidMount() {\r\n\r\n        const chart = createChart(this.props.containerId, { width: 800, height: 300 });\r\n        this.chart = chart;\r\n\r\n        const lineSeries = chart.addLineSeries();\r\n        \r\n        lineSeries.setData([\r\n            { time: '2019-04-10', value: 60.01 },\r\n            { time: '2019-04-11', value: 80.01 },\r\n        ]);\r\n\r\n        const barSeries = chart.addBarSeries({\r\n            thinBars: false,\r\n        });\r\n\r\n        // set the data\r\n        barSeries.setData([\r\n            { time: \"2019-04-10\", open: 141.77, high: 170.39, low: 120.25, close: 145.72 },\r\n            { time: \"2019-04-11\", open: 145.72, high: 147.99, low: 100.11, close: 108.19 },\r\n                 ]);\r\n    }\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tif (this.chart !== null) {\r\n\t\t\tthis.chart.remove();\r\n\t\t\tthis.chart = null;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tid={ this.props.containerId }\r\n                className={ 'LightweightChart' }\r\n                style={{ margin: '1rem' }}\r\n\t\t\t/>\r\n\t\t);\r\n    }\r\n    \r\n    // render() {\r\n    //     return (\r\n    //         <Paper elevation={4} style={{ margin: '1rem' }}>\r\n    //             <Typography variant=\"h6\">\r\n    //                 LightweightChart\r\n    //             </Typography>\r\n    //         </Paper>\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default LightweightChart;","import React, { Component } from 'react';\nimport BinanceAppBar from \"./components/AppBar/index\";\nimport LightweightChart from \"./components/Chart/index\";\nimport WalletStatus from \"./components/WalletStatus/index\";\nimport OrderHistory from \"./components/OrderHistory/index\";\nimport { Grid } from '@material-ui/core'\nimport { useStyles } from './components/styles/styles';\n\n// function App() {\n//     const classes = useStyles();\n//     return (\n//         <Grid container spacing={2}>\n//             <Grid item lg={12}>\n//                 <BinanceAppBar/>\n//             </Grid>\n//             <Grid item lg={9}>\n//                 <LightweightChart/>\n//             </Grid>\n//             <Grid item lg={3}>\n//                 <WalletStatus/>\n//             </Grid>\n//             <Grid item lg={12}>\n//                 <OrderHistory/>\n//             </Grid>\n//         </Grid>\n//     );\n// }\n\n// export default App;\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>\n                        {window.token}\n                        {window.title}\n                        {window.pnl}\n                        {window.spot_balance}\n                        {window.spot_total}\n                        {window.grand_total}\n                        {window.positions}\n                        {window.futures_account}\n                    </p>\n                    {/* <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a> */}\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}